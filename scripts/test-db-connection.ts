import mysql from "mysql2/promise"
import dotenv from "dotenv"

// Za≈Çaduj zmienne ≈õrodowiskowe z pliku .env
dotenv.config()

async function testConnection() {
  console.log("=== Test po≈ÇƒÖczenia z bazƒÖ danych ===")
  console.log("Dane po≈ÇƒÖczenia:")
  console.log(`Host: ${process.env.DB_HOST}`)
  console.log(`U≈ºytkownik: ${process.env.DB_USER}`)
  console.log(`Baza danych: ${process.env.DB_NAME}`)
  console.log(`Port: ${process.env.DB_PORT || 3306}`)
  console.log(`SSL: ${process.env.DB_SSL === "true" ? "W≈ÇƒÖczone" : "Wy≈ÇƒÖczone"}`)
  console.log("\nPr√≥ba po≈ÇƒÖczenia...")

  try {
    // Opcje po≈ÇƒÖczenia
    const connectionOptions: mysql.ConnectionOptions = {
      host: process.env.DB_HOST,
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      database: process.env.DB_NAME,
      port: process.env.DB_PORT ? Number.parseInt(process.env.DB_PORT) : 3306,
      connectTimeout: 10000, // 10 sekund
    }

    // Dodaj opcje SSL tylko je≈õli jest w≈ÇƒÖczone
    if (process.env.DB_SSL === "true") {
      console.log("U≈ºywam po≈ÇƒÖczenia SSL")
      connectionOptions.ssl = {}
    }

    // Pr√≥ba po≈ÇƒÖczenia
    const connection = await mysql.createConnection(connectionOptions)
    console.log("\n‚úÖ Po≈ÇƒÖczenie ustanowione pomy≈õlnie!")

    // Sprawd≈∫, czy mo≈ºemy wykonaƒá proste zapytanie
    console.log("\nPr√≥ba wykonania zapytania SELECT 1...")
    const [result] = await connection.execute("SELECT 1 as test")
    console.log(`‚úÖ Zapytanie wykonane pomy≈õlnie. Wynik: ${JSON.stringify(result)}`)

    // Sprawd≈∫, czy tabele istniejƒÖ
    console.log("\nSprawdzanie tabel w bazie danych...")
    const [tables] = await connection.execute("SHOW TABLES")
    console.log("Tabele w bazie danych:")
    console.log(tables)

    // Zamknij po≈ÇƒÖczenie
    await connection.end()
    console.log("\n‚úÖ Po≈ÇƒÖczenie zamkniƒôte pomy≈õlnie")
  } catch (error) {
    console.error("\n‚ùå B≈ÇƒÖd podczas po≈ÇƒÖczenia z bazƒÖ danych:")
    console.error(error)

    // Dodatkowe informacje diagnostyczne
    if (error instanceof Error) {
      console.log("\nSzczeg√≥≈Çy b≈Çƒôdu:")
      console.log(`Nazwa b≈Çƒôdu: ${error.name}`)
      console.log(`Wiadomo≈õƒá: ${error.message}`)
      console.log(`Stos wywo≈Ça≈Ñ: ${error.stack}`)

      // Sprawd≈∫ typowe problemy
      if (error.message.includes("ECONNREFUSED")) {
        console.log("\nüîç Diagnoza: Serwer bazy danych odrzuca po≈ÇƒÖczenie.")
        console.log("Mo≈ºliwe przyczyny:")
        console.log("1. Serwer MySQL nie jest uruchomiony")
        console.log("2. Nieprawid≈Çowy adres hosta lub port")
        console.log("3. Firewall blokuje po≈ÇƒÖczenie")
        console.log("\nSugestie:")
        console.log("- Sprawd≈∫, czy serwer MySQL jest uruchomiony")
        console.log("- Sprawd≈∫, czy podany host i port sƒÖ poprawne")
        console.log("- Sprawd≈∫ ustawienia firewalla")
      } else if (error.message.includes("ER_ACCESS_DENIED_ERROR")) {
        console.log("\nüîç Diagnoza: Odmowa dostƒôpu.")
        console.log("Mo≈ºliwe przyczyny:")
        console.log("1. Nieprawid≈Çowa nazwa u≈ºytkownika lub has≈Ço")
        console.log("2. U≈ºytkownik nie ma uprawnie≈Ñ do bazy danych")
        console.log("\nSugestie:")
        console.log("- Sprawd≈∫, czy podana nazwa u≈ºytkownika i has≈Ço sƒÖ poprawne")
        console.log("- Sprawd≈∫, czy u≈ºytkownik ma uprawnienia do bazy danych")
      } else if (error.message.includes("ER_BAD_DB_ERROR")) {
        console.log("\nüîç Diagnoza: Baza danych nie istnieje.")
        console.log("Mo≈ºliwe przyczyny:")
        console.log("1. Baza danych o podanej nazwie nie istnieje")
        console.log("2. U≈ºytkownik nie ma uprawnie≈Ñ do bazy danych")
        console.log("\nSugestie:")
        console.log("- Sprawd≈∫, czy baza danych o podanej nazwie istnieje")
        console.log("- Utw√≥rz bazƒô danych, je≈õli nie istnieje")
        console.log("- Sprawd≈∫, czy u≈ºytkownik ma uprawnienia do bazy danych")
      } else if (error.message.includes("ETIMEDOUT")) {
        console.log("\nüîç Diagnoza: Przekroczono limit czasu po≈ÇƒÖczenia.")
        console.log("Mo≈ºliwe przyczyny:")
        console.log("1. Serwer bazy danych jest niedostƒôpny")
        console.log("2. Problemy z sieciƒÖ")
        console.log("3. Firewall blokuje po≈ÇƒÖczenie")
        console.log("\nSugestie:")
        console.log("- Sprawd≈∫, czy serwer bazy danych jest dostƒôpny")
        console.log("- Sprawd≈∫ po≈ÇƒÖczenie sieciowe")
        console.log("- Sprawd≈∫ ustawienia firewalla")
      } else if (error.message.includes("SSL")) {
        console.log("\nüîç Diagnoza: Problem z SSL.")
        console.log("Mo≈ºliwe przyczyny:")
        console.log("1. Serwer nie obs≈Çuguje SSL")
        console.log("2. Nieprawid≈Çowa konfiguracja SSL")
        console.log("\nSugestie:")
        console.log("- Ustaw DB_SSL=false, je≈õli serwer nie wymaga SSL")
        console.log("- Sprawd≈∫ konfiguracjƒô SSL na serwerze")
      }
    }
  }
}

// Uruchom test
testConnection()

